import { Client } from "./api/client.gen.js";
import { ConnectOpts } from "./connectOpts.js";
export type CallbackFct = (client: Client) => Promise<void>;
/**
 * connection executes the given function using the default global Dagger client.
 *
 * @example
 * ```ts
 * await connection(
 *   async () => {
 *     await dag
 *       .container()
 *       .from("alpine")
 *       .withExec(["apk", "add", "curl"])
 *       .withExec(["curl", "https://dagger.io/"])
 *       .sync()
 *   }, { LogOutput: process.stderr }
 * )
 * ```
 */
export declare function connection(fct: () => Promise<void>, cfg?: ConnectOpts): Promise<void>;
/**
 * Close global client connection
 */
export declare function close(): void;
/**
 * connect runs GraphQL server and initializes a
 * GraphQL client to execute query on it through its callback.
 * This implementation is based on the existing Go SDK.
 */
export declare function connect(cb: CallbackFct, config?: ConnectOpts): Promise<void>;
//# sourceMappingURL=connect.d.ts.map