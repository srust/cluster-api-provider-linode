/**
 * This file was auto-generated by `client-gen`.
 * Do not make direct changes to the file.
 */
import { Context } from "../context/context.js";
/**
 * @hidden
 */
export type QueryTree = {
    operation: string;
    args?: Record<string, unknown>;
};
/**
 * @hidden
 */
export type Metadata = {
    [key: string]: {
        is_enum?: boolean;
    };
};
interface ClientConfig {
    queryTree?: QueryTree[];
    ctx?: Context;
}
declare class BaseClient {
    protected _queryTree: QueryTree[];
    protected _ctx: Context;
    /**
     * @hidden
     */
    constructor({ queryTree, ctx }?: ClientConfig);
    /**
     * @hidden
     */
    get queryTree(): QueryTree[];
}
export type BuildArg = {
    /**
     * The build argument name.
     */
    name: string;
    /**
     * The build argument value.
     */
    value: string;
};
/**
 * Sharing mode of the cache volume.
 */
export declare enum CacheSharingMode {
    /**
     * Shares the cache volume amongst many build pipelines, but will serialize the writes
     */
    Locked = "LOCKED",
    /**
     * Keeps a cache volume for a single build pipeline
     */
    Private = "PRIVATE",
    /**
     * Shares the cache volume amongst many build pipelines
     */
    Shared = "SHARED"
}
/**
 * The `CacheVolumeID` scalar type represents an identifier for an object of type CacheVolume.
 */
export type CacheVolumeID = string & {
    __CacheVolumeID: never;
};
export type ContainerAsTarballOpts = {
    /**
     * Identifiers for other platform specific containers.
     *
     * Used for multi-platform images.
     */
    platformVariants?: Container[];
    /**
     * Force each layer of the image to use the specified compression algorithm.
     *
     * If this is unset, then if a layer already has a compressed blob in the engine's cache, that will be used (this can result in a mix of compression algorithms for different layers). If this is unset and a layer has no compressed blob in the engine's cache, then it will be compressed using Gzip.
     */
    forcedCompression?: ImageLayerCompression;
    /**
     * Use the specified media types for the image's layers.
     *
     * Defaults to OCI, which is largely compatible with most recent container runtimes, but Docker may be needed for older runtimes without OCI support.
     */
    mediaTypes?: ImageMediaTypes;
};
export type ContainerBuildOpts = {
    /**
     * Path to the Dockerfile to use.
     */
    dockerfile?: string;
    /**
     * Target build stage to build.
     */
    target?: string;
    /**
     * Additional build arguments.
     */
    buildArgs?: BuildArg[];
    /**
     * Secrets to pass to the build.
     *
     * They will be mounted at /run/secrets/[secret-name] in the build container
     *
     * They can be accessed in the Dockerfile using the "secret" mount type and mount path /run/secrets/[secret-name], e.g. RUN --mount=type=secret,id=my-secret curl http://example.com?token=$(cat /run/secrets/my-secret)
     */
    secrets?: Secret[];
};
export type ContainerExportOpts = {
    /**
     * Identifiers for other platform specific containers.
     *
     * Used for multi-platform image.
     */
    platformVariants?: Container[];
    /**
     * Force each layer of the exported image to use the specified compression algorithm.
     *
     * If this is unset, then if a layer already has a compressed blob in the engine's cache, that will be used (this can result in a mix of compression algorithms for different layers). If this is unset and a layer has no compressed blob in the engine's cache, then it will be compressed using Gzip.
     */
    forcedCompression?: ImageLayerCompression;
    /**
     * Use the specified media types for the exported image's layers.
     *
     * Defaults to OCI, which is largely compatible with most recent container runtimes, but Docker may be needed for older runtimes without OCI support.
     */
    mediaTypes?: ImageMediaTypes;
};
export type ContainerImportOpts = {
    /**
     * Identifies the tag to import from the archive, if the archive bundles multiple tags.
     */
    tag?: string;
};
export type ContainerPipelineOpts = {
    /**
     * Description of the sub-pipeline.
     */
    description?: string;
    /**
     * Labels to apply to the sub-pipeline.
     */
    labels?: PipelineLabel[];
};
export type ContainerPublishOpts = {
    /**
     * Identifiers for other platform specific containers.
     *
     * Used for multi-platform image.
     */
    platformVariants?: Container[];
    /**
     * Force each layer of the published image to use the specified compression algorithm.
     *
     * If this is unset, then if a layer already has a compressed blob in the engine's cache, that will be used (this can result in a mix of compression algorithms for different layers). If this is unset and a layer has no compressed blob in the engine's cache, then it will be compressed using Gzip.
     */
    forcedCompression?: ImageLayerCompression;
    /**
     * Use the specified media types for the published image's layers.
     *
     * Defaults to OCI, which is largely compatible with most recent registries, but Docker may be needed for older registries without OCI support.
     */
    mediaTypes?: ImageMediaTypes;
};
export type ContainerTerminalOpts = {
    /**
     * If set, override the container's default terminal command and invoke these command arguments instead.
     */
    cmd?: string[];
};
export type ContainerWithDirectoryOpts = {
    /**
     * Patterns to exclude in the written directory (e.g. ["node_modules/**", ".gitignore", ".git/"]).
     */
    exclude?: string[];
    /**
     * Patterns to include in the written directory (e.g. ["*.go", "go.mod", "go.sum"]).
     */
    include?: string[];
    /**
     * A user:group to set for the directory and its contents.
     *
     * The user and group can either be an ID (1000:1000) or a name (foo:bar).
     *
     * If the group is omitted, it defaults to the same as the user.
     */
    owner?: string;
};
export type ContainerWithEntrypointOpts = {
    /**
     * Don't remove the default arguments when setting the entrypoint.
     */
    keepDefaultArgs?: boolean;
};
export type ContainerWithEnvVariableOpts = {
    /**
     * Replace `${VAR}` or `$VAR` in the value according to the current environment variables defined in the container (e.g., "/opt/bin:$PATH").
     */
    expand?: boolean;
};
export type ContainerWithExecOpts = {
    /**
     * If the container has an entrypoint, ignore it for args rather than using it to wrap them.
     */
    skipEntrypoint?: boolean;
    /**
     * Content to write to the command's standard input before closing (e.g., "Hello world").
     */
    stdin?: string;
    /**
     * Redirect the command's standard output to a file in the container (e.g., "/tmp/stdout").
     */
    redirectStdout?: string;
    /**
     * Redirect the command's standard error to a file in the container (e.g., "/tmp/stderr").
     */
    redirectStderr?: string;
    /**
     * Provides dagger access to the executed command.
     *
     * Do not use this option unless you trust the command being executed; the command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
     */
    experimentalPrivilegedNesting?: boolean;
    /**
     * Execute the command with all root capabilities. This is similar to running a command with "sudo" or executing "docker run" with the "--privileged" flag. Containerization does not provide any security guarantees when using this option. It should only be used when absolutely necessary and only with trusted commands.
     */
    insecureRootCapabilities?: boolean;
};
export type ContainerWithExposedPortOpts = {
    /**
     * Transport layer network protocol
     */
    protocol?: NetworkProtocol;
    /**
     * Optional port description
     */
    description?: string;
    /**
     * Skip the health check when run as a service.
     */
    experimentalSkipHealthcheck?: boolean;
};
export type ContainerWithFileOpts = {
    /**
     * Permission given to the copied file (e.g., 0600).
     */
    permissions?: number;
    /**
     * A user:group to set for the file.
     *
     * The user and group can either be an ID (1000:1000) or a name (foo:bar).
     *
     * If the group is omitted, it defaults to the same as the user.
     */
    owner?: string;
};
export type ContainerWithMountedCacheOpts = {
    /**
     * Identifier of the directory to use as the cache volume's root.
     */
    source?: Directory;
    /**
     * Sharing mode of the cache volume.
     */
    sharing?: CacheSharingMode;
    /**
     * A user:group to set for the mounted cache directory.
     *
     * Note that this changes the ownership of the specified mount along with the initial filesystem provided by source (if any). It does not have any effect if/when the cache has already been created.
     *
     * The user and group can either be an ID (1000:1000) or a name (foo:bar).
     *
     * If the group is omitted, it defaults to the same as the user.
     */
    owner?: string;
};
export type ContainerWithMountedDirectoryOpts = {
    /**
     * A user:group to set for the mounted directory and its contents.
     *
     * The user and group can either be an ID (1000:1000) or a name (foo:bar).
     *
     * If the group is omitted, it defaults to the same as the user.
     */
    owner?: string;
};
export type ContainerWithMountedFileOpts = {
    /**
     * A user or user:group to set for the mounted file.
     *
     * The user and group can either be an ID (1000:1000) or a name (foo:bar).
     *
     * If the group is omitted, it defaults to the same as the user.
     */
    owner?: string;
};
export type ContainerWithMountedSecretOpts = {
    /**
     * A user:group to set for the mounted secret.
     *
     * The user and group can either be an ID (1000:1000) or a name (foo:bar).
     *
     * If the group is omitted, it defaults to the same as the user.
     */
    owner?: string;
    /**
     * Permission given to the mounted secret (e.g., 0600).
     *
     * This option requires an owner to be set to be active.
     */
    mode?: number;
};
export type ContainerWithNewFileOpts = {
    /**
     * Content of the file to write (e.g., "Hello world!").
     */
    contents?: string;
    /**
     * Permission given to the written file (e.g., 0600).
     */
    permissions?: number;
    /**
     * A user:group to set for the file.
     *
     * The user and group can either be an ID (1000:1000) or a name (foo:bar).
     *
     * If the group is omitted, it defaults to the same as the user.
     */
    owner?: string;
};
export type ContainerWithUnixSocketOpts = {
    /**
     * A user:group to set for the mounted socket.
     *
     * The user and group can either be an ID (1000:1000) or a name (foo:bar).
     *
     * If the group is omitted, it defaults to the same as the user.
     */
    owner?: string;
};
export type ContainerWithoutEntrypointOpts = {
    /**
     * Don't remove the default arguments when unsetting the entrypoint.
     */
    keepDefaultArgs?: boolean;
};
export type ContainerWithoutExposedPortOpts = {
    /**
     * Port protocol to unexpose
     */
    protocol?: NetworkProtocol;
};
/**
 * The `ContainerID` scalar type represents an identifier for an object of type Container.
 */
export type ContainerID = string & {
    __ContainerID: never;
};
export type CurrentModuleWorkdirOpts = {
    /**
     * Exclude artifacts that match the given pattern (e.g., ["node_modules/", ".git*"]).
     */
    exclude?: string[];
    /**
     * Include only artifacts that match the given pattern (e.g., ["app/", "package.*"]).
     */
    include?: string[];
};
/**
 * The `CurrentModuleID` scalar type represents an identifier for an object of type CurrentModule.
 */
export type CurrentModuleID = string & {
    __CurrentModuleID: never;
};
export type DirectoryAsModuleOpts = {
    /**
     * An optional subpath of the directory which contains the module's configuration file.
     *
     * This is needed when the module code is in a subdirectory but requires parent directories to be loaded in order to execute. For example, the module source code may need a go.mod, project.toml, package.json, etc. file from a parent directory.
     *
     * If not set, the module source code is loaded from the root of the directory.
     */
    sourceRootPath?: string;
};
export type DirectoryDockerBuildOpts = {
    /**
     * The platform to build.
     */
    platform?: Platform;
    /**
     * Path to the Dockerfile to use (e.g., "frontend.Dockerfile").
     */
    dockerfile?: string;
    /**
     * Target build stage to build.
     */
    target?: string;
    /**
     * Build arguments to use in the build.
     */
    buildArgs?: BuildArg[];
    /**
     * Secrets to pass to the build.
     *
     * They will be mounted at /run/secrets/[secret-name].
     */
    secrets?: Secret[];
};
export type DirectoryEntriesOpts = {
    /**
     * Location of the directory to look at (e.g., "/src").
     */
    path?: string;
};
export type DirectoryPipelineOpts = {
    /**
     * Description of the sub-pipeline.
     */
    description?: string;
    /**
     * Labels to apply to the sub-pipeline.
     */
    labels?: PipelineLabel[];
};
export type DirectoryWithDirectoryOpts = {
    /**
     * Exclude artifacts that match the given pattern (e.g., ["node_modules/", ".git*"]).
     */
    exclude?: string[];
    /**
     * Include only artifacts that match the given pattern (e.g., ["app/", "package.*"]).
     */
    include?: string[];
};
export type DirectoryWithFileOpts = {
    /**
     * Permission given to the copied file (e.g., 0600).
     */
    permissions?: number;
};
export type DirectoryWithNewDirectoryOpts = {
    /**
     * Permission granted to the created directory (e.g., 0777).
     */
    permissions?: number;
};
export type DirectoryWithNewFileOpts = {
    /**
     * Permission given to the copied file (e.g., 0600).
     */
    permissions?: number;
};
/**
 * The `DirectoryID` scalar type represents an identifier for an object of type Directory.
 */
export type DirectoryID = string & {
    __DirectoryID: never;
};
/**
 * The `EnvVariableID` scalar type represents an identifier for an object of type EnvVariable.
 */
export type EnvVariableID = string & {
    __EnvVariableID: never;
};
/**
 * The `FieldTypeDefID` scalar type represents an identifier for an object of type FieldTypeDef.
 */
export type FieldTypeDefID = string & {
    __FieldTypeDefID: never;
};
export type FileExportOpts = {
    /**
     * If allowParentDirPath is true, the path argument can be a directory path, in which case the file will be created in that directory.
     */
    allowParentDirPath?: boolean;
};
/**
 * The `FileID` scalar type represents an identifier for an object of type File.
 */
export type FileID = string & {
    __FileID: never;
};
export type FunctionWithArgOpts = {
    /**
     * A doc string for the argument, if any
     */
    description?: string;
    /**
     * A default value to use for this argument if not explicitly set by the caller, if any
     */
    defaultValue?: JSON;
};
/**
 * The `FunctionArgID` scalar type represents an identifier for an object of type FunctionArg.
 */
export type FunctionArgID = string & {
    __FunctionArgID: never;
};
/**
 * The `FunctionCallArgValueID` scalar type represents an identifier for an object of type FunctionCallArgValue.
 */
export type FunctionCallArgValueID = string & {
    __FunctionCallArgValueID: never;
};
/**
 * The `FunctionCallID` scalar type represents an identifier for an object of type FunctionCall.
 */
export type FunctionCallID = string & {
    __FunctionCallID: never;
};
/**
 * The `FunctionID` scalar type represents an identifier for an object of type Function.
 */
export type FunctionID = string & {
    __FunctionID: never;
};
/**
 * The `GeneratedCodeID` scalar type represents an identifier for an object of type GeneratedCode.
 */
export type GeneratedCodeID = string & {
    __GeneratedCodeID: never;
};
/**
 * The `GitModuleSourceID` scalar type represents an identifier for an object of type GitModuleSource.
 */
export type GitModuleSourceID = string & {
    __GitModuleSourceID: never;
};
export type GitRefTreeOpts = {
    /**
     * DEPRECATED: This option should be passed to `git` instead.
     */
    sshKnownHosts?: string;
    /**
     * DEPRECATED: This option should be passed to `git` instead.
     */
    sshAuthSocket?: Socket;
};
/**
 * The `GitRefID` scalar type represents an identifier for an object of type GitRef.
 */
export type GitRefID = string & {
    __GitRefID: never;
};
/**
 * The `GitRepositoryID` scalar type represents an identifier for an object of type GitRepository.
 */
export type GitRepositoryID = string & {
    __GitRepositoryID: never;
};
export type HostDirectoryOpts = {
    /**
     * Exclude artifacts that match the given pattern (e.g., ["node_modules/", ".git*"]).
     */
    exclude?: string[];
    /**
     * Include only artifacts that match the given pattern (e.g., ["app/", "package.*"]).
     */
    include?: string[];
};
export type HostServiceOpts = {
    /**
     * Upstream host to forward traffic to.
     */
    host?: string;
    /**
     * Ports to expose via the service, forwarding through the host network.
     *
     * If a port's frontend is unspecified or 0, it defaults to the same as the backend port.
     *
     * An empty set of ports is not valid; an error will be returned.
     */
    ports: PortForward[];
};
export type HostTunnelOpts = {
    /**
     * Configure explicit port forwarding rules for the tunnel.
     *
     * If a port's frontend is unspecified or 0, a random port will be chosen by the host.
     *
     * If no ports are given, all of the service's ports are forwarded. If native is true, each port maps to the same port on the host. If native is false, each port maps to a random port chosen by the host.
     *
     * If ports are given and native is true, the ports are additive.
     */
    ports?: PortForward[];
    /**
     * Map each service port to the same port on the host, as if the service were running natively.
     *
     * Note: enabling may result in port conflicts.
     */
    native?: boolean;
};
/**
 * The `HostID` scalar type represents an identifier for an object of type Host.
 */
export type HostID = string & {
    __HostID: never;
};
/**
 * Compression algorithm to use for image layers.
 */
export declare enum ImageLayerCompression {
    Estargz = "EStarGZ",
    Gzip = "Gzip",
    Uncompressed = "Uncompressed",
    Zstd = "Zstd"
}
/**
 * Mediatypes to use in published or exported image metadata.
 */
export declare enum ImageMediaTypes {
    Dockermediatypes = "DockerMediaTypes",
    Ocimediatypes = "OCIMediaTypes"
}
/**
 * The `InputTypeDefID` scalar type represents an identifier for an object of type InputTypeDef.
 */
export type InputTypeDefID = string & {
    __InputTypeDefID: never;
};
/**
 * The `InterfaceTypeDefID` scalar type represents an identifier for an object of type InterfaceTypeDef.
 */
export type InterfaceTypeDefID = string & {
    __InterfaceTypeDefID: never;
};
/**
 * An arbitrary JSON-encoded value.
 */
export type JSON = string & {
    __JSON: never;
};
/**
 * The `LabelID` scalar type represents an identifier for an object of type Label.
 */
export type LabelID = string & {
    __LabelID: never;
};
/**
 * The `ListTypeDefID` scalar type represents an identifier for an object of type ListTypeDef.
 */
export type ListTypeDefID = string & {
    __ListTypeDefID: never;
};
/**
 * The `LocalModuleSourceID` scalar type represents an identifier for an object of type LocalModuleSource.
 */
export type LocalModuleSourceID = string & {
    __LocalModuleSourceID: never;
};
/**
 * The `ModuleDependencyID` scalar type represents an identifier for an object of type ModuleDependency.
 */
export type ModuleDependencyID = string & {
    __ModuleDependencyID: never;
};
/**
 * The `ModuleID` scalar type represents an identifier for an object of type Module.
 */
export type ModuleID = string & {
    __ModuleID: never;
};
/**
 * The `ModuleSourceID` scalar type represents an identifier for an object of type ModuleSource.
 */
export type ModuleSourceID = string & {
    __ModuleSourceID: never;
};
/**
 * The kind of module source.
 */
export declare enum ModuleSourceKind {
    GitSource = "GIT_SOURCE",
    LocalSource = "LOCAL_SOURCE"
}
/**
 * Transport layer network protocol associated to a port.
 */
export declare enum NetworkProtocol {
    Tcp = "TCP",
    Udp = "UDP"
}
/**
 * The `ObjectTypeDefID` scalar type represents an identifier for an object of type ObjectTypeDef.
 */
export type ObjectTypeDefID = string & {
    __ObjectTypeDefID: never;
};
export type PipelineLabel = {
    /**
     * Label name.
     */
    name: string;
    /**
     * Label value.
     */
    value: string;
};
/**
 * The platform config OS and architecture in a Container.
 *
 * The format is [os]/[platform]/[version] (e.g., "darwin/arm64/v7", "windows/amd64", "linux/arm64").
 */
export type Platform = string & {
    __Platform: never;
};
export type PortForward = {
    /**
     * Destination port for traffic.
     */
    backend: number;
    /**
     * Port to expose to clients. If unspecified, a default will be chosen.
     */
    frontend?: number;
    /**
     * Transport layer protocol to use for traffic.
     */
    protocol?: NetworkProtocol;
};
/**
 * The `PortID` scalar type represents an identifier for an object of type Port.
 */
export type PortID = string & {
    __PortID: never;
};
export type ClientContainerOpts = {
    /**
     * DEPRECATED: Use `loadContainerFromID` instead.
     */
    id?: ContainerID;
    /**
     * Platform to initialize the container with.
     */
    platform?: Platform;
};
export type ClientDirectoryOpts = {
    /**
     * DEPRECATED: Use `loadDirectoryFromID` isntead.
     */
    id?: DirectoryID;
};
export type ClientGitOpts = {
    /**
     * Set to true to keep .git directory.
     */
    keepGitDir?: boolean;
    /**
     * A service which must be started before the repo is fetched.
     */
    experimentalServiceHost?: Service;
    /**
     * Set SSH known hosts
     */
    sshKnownHosts?: string;
    /**
     * Set SSH auth socket
     */
    sshAuthSocket?: Socket;
};
export type ClientHttpOpts = {
    /**
     * A service which must be started before the URL is fetched.
     */
    experimentalServiceHost?: Service;
};
export type ClientModuleDependencyOpts = {
    /**
     * If set, the name to use for the dependency. Otherwise, once installed to a parent module, the name of the dependency module will be used by default.
     */
    name?: string;
};
export type ClientModuleSourceOpts = {
    /**
     * If true, enforce that the source is a stable version for source kinds that support versioning.
     */
    stable?: boolean;
};
export type ClientPipelineOpts = {
    /**
     * Description of the sub-pipeline.
     */
    description?: string;
    /**
     * Labels to apply to the sub-pipeline.
     */
    labels?: PipelineLabel[];
};
/**
 * The `SecretID` scalar type represents an identifier for an object of type Secret.
 */
export type SecretID = string & {
    __SecretID: never;
};
export type ServiceEndpointOpts = {
    /**
     * The exposed port number for the endpoint
     */
    port?: number;
    /**
     * Return a URL with the given scheme, eg. http for http://
     */
    scheme?: string;
};
export type ServiceStopOpts = {
    /**
     * Immediately kill the service without waiting for a graceful exit
     */
    kill?: boolean;
};
export type ServiceUpOpts = {
    /**
     * List of frontend/backend port mappings to forward.
     *
     * Frontend is the port accepting traffic on the host, backend is the service port.
     */
    ports?: PortForward[];
    /**
     * Bind each tunnel port to a random port on the host.
     */
    random?: boolean;
};
/**
 * The `ServiceID` scalar type represents an identifier for an object of type Service.
 */
export type ServiceID = string & {
    __ServiceID: never;
};
/**
 * The `SocketID` scalar type represents an identifier for an object of type Socket.
 */
export type SocketID = string & {
    __SocketID: never;
};
/**
 * The `TerminalID` scalar type represents an identifier for an object of type Terminal.
 */
export type TerminalID = string & {
    __TerminalID: never;
};
export type TypeDefWithFieldOpts = {
    /**
     * A doc string for the field, if any
     */
    description?: string;
};
export type TypeDefWithInterfaceOpts = {
    description?: string;
};
export type TypeDefWithObjectOpts = {
    description?: string;
};
/**
 * The `TypeDefID` scalar type represents an identifier for an object of type TypeDef.
 */
export type TypeDefID = string & {
    __TypeDefID: never;
};
/**
 * Distinguishes the different kinds of TypeDefs.
 */
export declare enum TypeDefKind {
    /**
     * A boolean value.
     */
    BooleanKind = "BOOLEAN_KIND",
    /**
     * A graphql input type, used only when representing the core API via TypeDefs.
     */
    InputKind = "INPUT_KIND",
    /**
     * An integer value.
     */
    IntegerKind = "INTEGER_KIND",
    /**
     * A named type of functions that can be matched+implemented by other objects+interfaces.
     *
     * Always paired with an InterfaceTypeDef.
     */
    InterfaceKind = "INTERFACE_KIND",
    /**
     * A list of values all having the same type.
     *
     * Always paired with a ListTypeDef.
     */
    ListKind = "LIST_KIND",
    /**
     * A named type defined in the GraphQL schema, with fields and functions.
     *
     * Always paired with an ObjectTypeDef.
     */
    ObjectKind = "OBJECT_KIND",
    /**
     * A string value.
     */
    StringKind = "STRING_KIND",
    /**
     * A special kind used to signify that no value is returned.
     *
     * This is used for functions that have no return value. The outer TypeDef specifying this Kind is always Optional, as the Void is never actually represented.
     */
    VoidKind = "VOID_KIND"
}
/**
 * The absence of a value.
 *
 * A Null Void is used as a placeholder for resolvers that do not return anything.
 */
export type Void = string & {
    __Void: never;
};
export type __TypeEnumValuesOpts = {
    includeDeprecated?: boolean;
};
export type __TypeFieldsOpts = {
    includeDeprecated?: boolean;
};
/**
 * A directory whose contents persist across runs.
 */
export declare class CacheVolume extends BaseClient {
    private readonly _id?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: CacheVolumeID);
    /**
     * A unique identifier for this CacheVolume.
     */
    id: () => Promise<CacheVolumeID>;
}
/**
 * An OCI-compatible container, also known as a Docker container.
 */
export declare class Container extends BaseClient {
    private readonly _id?;
    private readonly _envVariable?;
    private readonly _export?;
    private readonly _imageRef?;
    private readonly _label?;
    private readonly _platform?;
    private readonly _publish?;
    private readonly _stderr?;
    private readonly _stdout?;
    private readonly _sync?;
    private readonly _user?;
    private readonly _workdir?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: ContainerID, _envVariable?: string, _export?: boolean, _imageRef?: string, _label?: string, _platform?: Platform, _publish?: string, _stderr?: string, _stdout?: string, _sync?: ContainerID, _user?: string, _workdir?: string);
    /**
     * A unique identifier for this Container.
     */
    id: () => Promise<ContainerID>;
    /**
     * Turn the container into a Service.
     *
     * Be sure to set any exposed ports before this conversion.
     */
    asService: () => Service;
    /**
     * Returns a File representing the container serialized to a tarball.
     * @param opts.platformVariants Identifiers for other platform specific containers.
     *
     * Used for multi-platform images.
     * @param opts.forcedCompression Force each layer of the image to use the specified compression algorithm.
     *
     * If this is unset, then if a layer already has a compressed blob in the engine's cache, that will be used (this can result in a mix of compression algorithms for different layers). If this is unset and a layer has no compressed blob in the engine's cache, then it will be compressed using Gzip.
     * @param opts.mediaTypes Use the specified media types for the image's layers.
     *
     * Defaults to OCI, which is largely compatible with most recent container runtimes, but Docker may be needed for older runtimes without OCI support.
     */
    asTarball: (opts?: ContainerAsTarballOpts) => File;
    /**
     * Initializes this container from a Dockerfile build.
     * @param context Directory context used by the Dockerfile.
     * @param opts.dockerfile Path to the Dockerfile to use.
     * @param opts.target Target build stage to build.
     * @param opts.buildArgs Additional build arguments.
     * @param opts.secrets Secrets to pass to the build.
     *
     * They will be mounted at /run/secrets/[secret-name] in the build container
     *
     * They can be accessed in the Dockerfile using the "secret" mount type and mount path /run/secrets/[secret-name], e.g. RUN --mount=type=secret,id=my-secret curl http://example.com?token=$(cat /run/secrets/my-secret)
     */
    build: (context: Directory, opts?: ContainerBuildOpts) => Container;
    /**
     * Retrieves default arguments for future commands.
     */
    defaultArgs: () => Promise<string[]>;
    /**
     * Retrieves a directory at the given path.
     *
     * Mounts are included.
     * @param path The path of the directory to retrieve (e.g., "./src").
     */
    directory: (path: string) => Directory;
    /**
     * Retrieves entrypoint to be prepended to the arguments of all commands.
     */
    entrypoint: () => Promise<string[]>;
    /**
     * Retrieves the value of the specified environment variable.
     * @param name The name of the environment variable to retrieve (e.g., "PATH").
     */
    envVariable: (name: string) => Promise<string>;
    /**
     * Retrieves the list of environment variables passed to commands.
     */
    envVariables: () => Promise<EnvVariable[]>;
    /**
     * EXPERIMENTAL API! Subject to change/removal at any time.
     *
     * Configures all available GPUs on the host to be accessible to this container.
     *
     * This currently works for Nvidia devices only.
     */
    experimentalWithAllGPUs: () => Container;
    /**
     * EXPERIMENTAL API! Subject to change/removal at any time.
     *
     * Configures the provided list of devices to be accesible to this container.
     *
     * This currently works for Nvidia devices only.
     * @param devices List of devices to be accessible to this container.
     */
    experimentalWithGPU: (devices: string[]) => Container;
    /**
     * Writes the container as an OCI tarball to the destination file path on the host.
     *
     * Return true on success.
     *
     * It can also export platform variants.
     * @param path Host's destination path (e.g., "./tarball").
     *
     * Path can be relative to the engine's workdir or absolute.
     * @param opts.platformVariants Identifiers for other platform specific containers.
     *
     * Used for multi-platform image.
     * @param opts.forcedCompression Force each layer of the exported image to use the specified compression algorithm.
     *
     * If this is unset, then if a layer already has a compressed blob in the engine's cache, that will be used (this can result in a mix of compression algorithms for different layers). If this is unset and a layer has no compressed blob in the engine's cache, then it will be compressed using Gzip.
     * @param opts.mediaTypes Use the specified media types for the exported image's layers.
     *
     * Defaults to OCI, which is largely compatible with most recent container runtimes, but Docker may be needed for older runtimes without OCI support.
     */
    export: (path: string, opts?: ContainerExportOpts) => Promise<boolean>;
    /**
     * Retrieves the list of exposed ports.
     *
     * This includes ports already exposed by the image, even if not explicitly added with dagger.
     */
    exposedPorts: () => Promise<Port[]>;
    /**
     * Retrieves a file at the given path.
     *
     * Mounts are included.
     * @param path The path of the file to retrieve (e.g., "./README.md").
     */
    file: (path: string) => File;
    /**
     * Initializes this container from a pulled base image.
     * @param address Image's address from its registry.
     *
     * Formatted as [host]/[user]/[repo]:[tag] (e.g., "docker.io/dagger/dagger:main").
     */
    from: (address: string) => Container;
    /**
     * The unique image reference which can only be retrieved immediately after the 'Container.From' call.
     */
    imageRef: () => Promise<string>;
    /**
     * Reads the container from an OCI tarball.
     * @param source File to read the container from.
     * @param opts.tag Identifies the tag to import from the archive, if the archive bundles multiple tags.
     */
    import_: (source: File, opts?: ContainerImportOpts) => Container;
    /**
     * Retrieves the value of the specified label.
     * @param name The name of the label (e.g., "org.opencontainers.artifact.created").
     */
    label: (name: string) => Promise<string>;
    /**
     * Retrieves the list of labels passed to container.
     */
    labels: () => Promise<Label[]>;
    /**
     * Retrieves the list of paths where a directory is mounted.
     */
    mounts: () => Promise<string[]>;
    /**
     * Creates a named sub-pipeline.
     * @param name Name of the sub-pipeline.
     * @param opts.description Description of the sub-pipeline.
     * @param opts.labels Labels to apply to the sub-pipeline.
     */
    pipeline: (name: string, opts?: ContainerPipelineOpts) => Container;
    /**
     * The platform this container executes and publishes as.
     */
    platform: () => Promise<Platform>;
    /**
     * Publishes this container as a new image to the specified address.
     *
     * Publish returns a fully qualified ref.
     *
     * It can also publish platform variants.
     * @param address Registry's address to publish the image to.
     *
     * Formatted as [host]/[user]/[repo]:[tag] (e.g. "docker.io/dagger/dagger:main").
     * @param opts.platformVariants Identifiers for other platform specific containers.
     *
     * Used for multi-platform image.
     * @param opts.forcedCompression Force each layer of the published image to use the specified compression algorithm.
     *
     * If this is unset, then if a layer already has a compressed blob in the engine's cache, that will be used (this can result in a mix of compression algorithms for different layers). If this is unset and a layer has no compressed blob in the engine's cache, then it will be compressed using Gzip.
     * @param opts.mediaTypes Use the specified media types for the published image's layers.
     *
     * Defaults to OCI, which is largely compatible with most recent registries, but Docker may be needed for older registries without OCI support.
     */
    publish: (address: string, opts?: ContainerPublishOpts) => Promise<string>;
    /**
     * Retrieves this container's root filesystem. Mounts are not included.
     */
    rootfs: () => Directory;
    /**
     * The error stream of the last executed command.
     *
     * Will execute default command if none is set, or error if there's no default.
     */
    stderr: () => Promise<string>;
    /**
     * The output stream of the last executed command.
     *
     * Will execute default command if none is set, or error if there's no default.
     */
    stdout: () => Promise<string>;
    /**
     * Forces evaluation of the pipeline in the engine.
     *
     * It doesn't run the default command if no exec has been set.
     */
    sync: () => Promise<Container>;
    /**
     * Return an interactive terminal for this container using its configured default terminal command if not overridden by args (or sh as a fallback default).
     * @param opts.cmd If set, override the container's default terminal command and invoke these command arguments instead.
     */
    terminal: (opts?: ContainerTerminalOpts) => Terminal;
    /**
     * Retrieves the user to be set for all commands.
     */
    user: () => Promise<string>;
    /**
     * Configures default arguments for future commands.
     * @param args Arguments to prepend to future executions (e.g., ["-v", "--no-cache"]).
     */
    withDefaultArgs: (args: string[]) => Container;
    /**
     * Set the default command to invoke for the container's terminal API.
     * @param args The args of the command.
     */
    withDefaultTerminalCmd: (args: string[]) => Container;
    /**
     * Retrieves this container plus a directory written at the given path.
     * @param path Location of the written directory (e.g., "/tmp/directory").
     * @param directory Identifier of the directory to write
     * @param opts.exclude Patterns to exclude in the written directory (e.g. ["node_modules/**", ".gitignore", ".git/"]).
     * @param opts.include Patterns to include in the written directory (e.g. ["*.go", "go.mod", "go.sum"]).
     * @param opts.owner A user:group to set for the directory and its contents.
     *
     * The user and group can either be an ID (1000:1000) or a name (foo:bar).
     *
     * If the group is omitted, it defaults to the same as the user.
     */
    withDirectory: (path: string, directory: Directory, opts?: ContainerWithDirectoryOpts) => Container;
    /**
     * Retrieves this container but with a different command entrypoint.
     * @param args Entrypoint to use for future executions (e.g., ["go", "run"]).
     * @param opts.keepDefaultArgs Don't remove the default arguments when setting the entrypoint.
     */
    withEntrypoint: (args: string[], opts?: ContainerWithEntrypointOpts) => Container;
    /**
     * Retrieves this container plus the given environment variable.
     * @param name The name of the environment variable (e.g., "HOST").
     * @param value The value of the environment variable. (e.g., "localhost").
     * @param opts.expand Replace `${VAR}` or `$VAR` in the value according to the current environment variables defined in the container (e.g., "/opt/bin:$PATH").
     */
    withEnvVariable: (name: string, value: string, opts?: ContainerWithEnvVariableOpts) => Container;
    /**
     * Retrieves this container after executing the specified command inside it.
     * @param args Command to run instead of the container's default command (e.g., ["run", "main.go"]).
     *
     * If empty, the container's default command is used.
     * @param opts.skipEntrypoint If the container has an entrypoint, ignore it for args rather than using it to wrap them.
     * @param opts.stdin Content to write to the command's standard input before closing (e.g., "Hello world").
     * @param opts.redirectStdout Redirect the command's standard output to a file in the container (e.g., "/tmp/stdout").
     * @param opts.redirectStderr Redirect the command's standard error to a file in the container (e.g., "/tmp/stderr").
     * @param opts.experimentalPrivilegedNesting Provides dagger access to the executed command.
     *
     * Do not use this option unless you trust the command being executed; the command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
     * @param opts.insecureRootCapabilities Execute the command with all root capabilities. This is similar to running a command with "sudo" or executing "docker run" with the "--privileged" flag. Containerization does not provide any security guarantees when using this option. It should only be used when absolutely necessary and only with trusted commands.
     */
    withExec: (args: string[], opts?: ContainerWithExecOpts) => Container;
    /**
     * Expose a network port.
     *
     * Exposed ports serve two purposes:
     *
     * - For health checks and introspection, when running services
     *
     * - For setting the EXPOSE OCI field when publishing the container
     * @param port Port number to expose
     * @param opts.protocol Transport layer network protocol
     * @param opts.description Optional port description
     * @param opts.experimentalSkipHealthcheck Skip the health check when run as a service.
     */
    withExposedPort: (port: number, opts?: ContainerWithExposedPortOpts) => Container;
    /**
     * Retrieves this container plus the contents of the given file copied to the given path.
     * @param path Location of the copied file (e.g., "/tmp/file.txt").
     * @param source Identifier of the file to copy.
     * @param opts.permissions Permission given to the copied file (e.g., 0600).
     * @param opts.owner A user:group to set for the file.
     *
     * The user and group can either be an ID (1000:1000) or a name (foo:bar).
     *
     * If the group is omitted, it defaults to the same as the user.
     */
    withFile: (path: string, source: File, opts?: ContainerWithFileOpts) => Container;
    /**
     * Indicate that subsequent operations should be featured more prominently in the UI.
     */
    withFocus: () => Container;
    /**
     * Retrieves this container plus the given label.
     * @param name The name of the label (e.g., "org.opencontainers.artifact.created").
     * @param value The value of the label (e.g., "2023-01-01T00:00:00Z").
     */
    withLabel: (name: string, value: string) => Container;
    /**
     * Retrieves this container plus a cache volume mounted at the given path.
     * @param path Location of the cache directory (e.g., "/cache/node_modules").
     * @param cache Identifier of the cache volume to mount.
     * @param opts.source Identifier of the directory to use as the cache volume's root.
     * @param opts.sharing Sharing mode of the cache volume.
     * @param opts.owner A user:group to set for the mounted cache directory.
     *
     * Note that this changes the ownership of the specified mount along with the initial filesystem provided by source (if any). It does not have any effect if/when the cache has already been created.
     *
     * The user and group can either be an ID (1000:1000) or a name (foo:bar).
     *
     * If the group is omitted, it defaults to the same as the user.
     */
    withMountedCache: (path: string, cache: CacheVolume, opts?: ContainerWithMountedCacheOpts) => Container;
    /**
     * Retrieves this container plus a directory mounted at the given path.
     * @param path Location of the mounted directory (e.g., "/mnt/directory").
     * @param source Identifier of the mounted directory.
     * @param opts.owner A user:group to set for the mounted directory and its contents.
     *
     * The user and group can either be an ID (1000:1000) or a name (foo:bar).
     *
     * If the group is omitted, it defaults to the same as the user.
     */
    withMountedDirectory: (path: string, source: Directory, opts?: ContainerWithMountedDirectoryOpts) => Container;
    /**
     * Retrieves this container plus a file mounted at the given path.
     * @param path Location of the mounted file (e.g., "/tmp/file.txt").
     * @param source Identifier of the mounted file.
     * @param opts.owner A user or user:group to set for the mounted file.
     *
     * The user and group can either be an ID (1000:1000) or a name (foo:bar).
     *
     * If the group is omitted, it defaults to the same as the user.
     */
    withMountedFile: (path: string, source: File, opts?: ContainerWithMountedFileOpts) => Container;
    /**
     * Retrieves this container plus a secret mounted into a file at the given path.
     * @param path Location of the secret file (e.g., "/tmp/secret.txt").
     * @param source Identifier of the secret to mount.
     * @param opts.owner A user:group to set for the mounted secret.
     *
     * The user and group can either be an ID (1000:1000) or a name (foo:bar).
     *
     * If the group is omitted, it defaults to the same as the user.
     * @param opts.mode Permission given to the mounted secret (e.g., 0600).
     *
     * This option requires an owner to be set to be active.
     */
    withMountedSecret: (path: string, source: Secret, opts?: ContainerWithMountedSecretOpts) => Container;
    /**
     * Retrieves this container plus a temporary directory mounted at the given path.
     * @param path Location of the temporary directory (e.g., "/tmp/temp_dir").
     */
    withMountedTemp: (path: string) => Container;
    /**
     * Retrieves this container plus a new file written at the given path.
     * @param path Location of the written file (e.g., "/tmp/file.txt").
     * @param opts.contents Content of the file to write (e.g., "Hello world!").
     * @param opts.permissions Permission given to the written file (e.g., 0600).
     * @param opts.owner A user:group to set for the file.
     *
     * The user and group can either be an ID (1000:1000) or a name (foo:bar).
     *
     * If the group is omitted, it defaults to the same as the user.
     */
    withNewFile: (path: string, opts?: ContainerWithNewFileOpts) => Container;
    /**
     * Retrieves this container with a registry authentication for a given address.
     * @param address Registry's address to bind the authentication to.
     *
     * Formatted as [host]/[user]/[repo]:[tag] (e.g. docker.io/dagger/dagger:main).
     * @param username The username of the registry's account (e.g., "Dagger").
     * @param secret The API key, password or token to authenticate to this registry.
     */
    withRegistryAuth: (address: string, username: string, secret: Secret) => Container;
    /**
     * Retrieves the container with the given directory mounted to /.
     * @param directory Directory to mount.
     */
    withRootfs: (directory: Directory) => Container;
    /**
     * Retrieves this container plus an env variable containing the given secret.
     * @param name The name of the secret variable (e.g., "API_SECRET").
     * @param secret The identifier of the secret value.
     */
    withSecretVariable: (name: string, secret: Secret) => Container;
    /**
     * Establish a runtime dependency on a service.
     *
     * The service will be started automatically when needed and detached when it is no longer needed, executing the default command if none is set.
     *
     * The service will be reachable from the container via the provided hostname alias.
     *
     * The service dependency will also convey to any files or directories produced by the container.
     * @param alias A name that can be used to reach the service from the container
     * @param service Identifier of the service container
     */
    withServiceBinding: (alias: string, service: Service) => Container;
    /**
     * Retrieves this container plus a socket forwarded to the given Unix socket path.
     * @param path Location of the forwarded Unix socket (e.g., "/tmp/socket").
     * @param source Identifier of the socket to forward.
     * @param opts.owner A user:group to set for the mounted socket.
     *
     * The user and group can either be an ID (1000:1000) or a name (foo:bar).
     *
     * If the group is omitted, it defaults to the same as the user.
     */
    withUnixSocket: (path: string, source: Socket, opts?: ContainerWithUnixSocketOpts) => Container;
    /**
     * Retrieves this container with a different command user.
     * @param name The user to set (e.g., "root").
     */
    withUser: (name: string) => Container;
    /**
     * Retrieves this container with a different working directory.
     * @param path The path to set as the working directory (e.g., "/app").
     */
    withWorkdir: (path: string) => Container;
    /**
     * Retrieves this container with unset default arguments for future commands.
     */
    withoutDefaultArgs: () => Container;
    /**
     * Retrieves this container with an unset command entrypoint.
     * @param opts.keepDefaultArgs Don't remove the default arguments when unsetting the entrypoint.
     */
    withoutEntrypoint: (opts?: ContainerWithoutEntrypointOpts) => Container;
    /**
     * Retrieves this container minus the given environment variable.
     * @param name The name of the environment variable (e.g., "HOST").
     */
    withoutEnvVariable: (name: string) => Container;
    /**
     * Unexpose a previously exposed port.
     * @param port Port number to unexpose
     * @param opts.protocol Port protocol to unexpose
     */
    withoutExposedPort: (port: number, opts?: ContainerWithoutExposedPortOpts) => Container;
    /**
     * Indicate that subsequent operations should not be featured more prominently in the UI.
     *
     * This is the initial state of all containers.
     */
    withoutFocus: () => Container;
    /**
     * Retrieves this container minus the given environment label.
     * @param name The name of the label to remove (e.g., "org.opencontainers.artifact.created").
     */
    withoutLabel: (name: string) => Container;
    /**
     * Retrieves this container after unmounting everything at the given path.
     * @param path Location of the cache directory (e.g., "/cache/node_modules").
     */
    withoutMount: (path: string) => Container;
    /**
     * Retrieves this container without the registry authentication of a given address.
     * @param address Registry's address to remove the authentication from.
     *
     * Formatted as [host]/[user]/[repo]:[tag] (e.g. docker.io/dagger/dagger:main).
     */
    withoutRegistryAuth: (address: string) => Container;
    /**
     * Retrieves this container with a previously added Unix socket removed.
     * @param path Location of the socket to remove (e.g., "/tmp/socket").
     */
    withoutUnixSocket: (path: string) => Container;
    /**
     * Retrieves this container with an unset command user.
     *
     * Should default to root.
     */
    withoutUser: () => Container;
    /**
     * Retrieves this container with an unset working directory.
     *
     * Should default to "/".
     */
    withoutWorkdir: () => Container;
    /**
     * Retrieves the working directory for all commands.
     */
    workdir: () => Promise<string>;
    /**
     * Call the provided function with current Container.
     *
     * This is useful for reusability and readability by not breaking the calling chain.
     */
    with: (arg: (param: Container) => Container) => Container;
}
/**
 * Reflective module API provided to functions at runtime.
 */
export declare class CurrentModule extends BaseClient {
    private readonly _id?;
    private readonly _name?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: CurrentModuleID, _name?: string);
    /**
     * A unique identifier for this CurrentModule.
     */
    id: () => Promise<CurrentModuleID>;
    /**
     * The name of the module being executed in
     */
    name: () => Promise<string>;
    /**
     * The directory containing the module's source code loaded into the engine (plus any generated code that may have been created).
     */
    source: () => Directory;
    /**
     * Load a directory from the module's scratch working directory, including any changes that may have been made to it during module function execution.
     * @param path Location of the directory to access (e.g., ".").
     * @param opts.exclude Exclude artifacts that match the given pattern (e.g., ["node_modules/", ".git*"]).
     * @param opts.include Include only artifacts that match the given pattern (e.g., ["app/", "package.*"]).
     */
    workdir: (path: string, opts?: CurrentModuleWorkdirOpts) => Directory;
    /**
     * Load a file from the module's scratch working directory, including any changes that may have been made to it during module function execution.Load a file from the module's scratch working directory, including any changes that may have been made to it during module function execution.
     * @param path Location of the file to retrieve (e.g., "README.md").
     */
    workdirFile: (path: string) => File;
}
/**
 * A directory.
 */
export declare class Directory extends BaseClient {
    private readonly _id?;
    private readonly _export?;
    private readonly _sync?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: DirectoryID, _export?: boolean, _sync?: DirectoryID);
    /**
     * A unique identifier for this Directory.
     */
    id: () => Promise<DirectoryID>;
    /**
     * Load the directory as a Dagger module
     * @param opts.sourceRootPath An optional subpath of the directory which contains the module's configuration file.
     *
     * This is needed when the module code is in a subdirectory but requires parent directories to be loaded in order to execute. For example, the module source code may need a go.mod, project.toml, package.json, etc. file from a parent directory.
     *
     * If not set, the module source code is loaded from the root of the directory.
     */
    asModule: (opts?: DirectoryAsModuleOpts) => Module_;
    /**
     * Gets the difference between this directory and an another directory.
     * @param other Identifier of the directory to compare.
     */
    diff: (other: Directory) => Directory;
    /**
     * Retrieves a directory at the given path.
     * @param path Location of the directory to retrieve (e.g., "/src").
     */
    directory: (path: string) => Directory;
    /**
     * Builds a new Docker container from this directory.
     * @param opts.platform The platform to build.
     * @param opts.dockerfile Path to the Dockerfile to use (e.g., "frontend.Dockerfile").
     * @param opts.target Target build stage to build.
     * @param opts.buildArgs Build arguments to use in the build.
     * @param opts.secrets Secrets to pass to the build.
     *
     * They will be mounted at /run/secrets/[secret-name].
     */
    dockerBuild: (opts?: DirectoryDockerBuildOpts) => Container;
    /**
     * Returns a list of files and directories at the given path.
     * @param opts.path Location of the directory to look at (e.g., "/src").
     */
    entries: (opts?: DirectoryEntriesOpts) => Promise<string[]>;
    /**
     * Writes the contents of the directory to a path on the host.
     * @param path Location of the copied directory (e.g., "logs/").
     */
    export: (path: string) => Promise<boolean>;
    /**
     * Retrieves a file at the given path.
     * @param path Location of the file to retrieve (e.g., "README.md").
     */
    file: (path: string) => File;
    /**
     * Returns a list of files and directories that matche the given pattern.
     * @param pattern Pattern to match (e.g., "*.md").
     */
    glob: (pattern: string) => Promise<string[]>;
    /**
     * Creates a named sub-pipeline.
     * @param name Name of the sub-pipeline.
     * @param opts.description Description of the sub-pipeline.
     * @param opts.labels Labels to apply to the sub-pipeline.
     */
    pipeline: (name: string, opts?: DirectoryPipelineOpts) => Directory;
    /**
     * Force evaluation in the engine.
     */
    sync: () => Promise<Directory>;
    /**
     * Retrieves this directory plus a directory written at the given path.
     * @param path Location of the written directory (e.g., "/src/").
     * @param directory Identifier of the directory to copy.
     * @param opts.exclude Exclude artifacts that match the given pattern (e.g., ["node_modules/", ".git*"]).
     * @param opts.include Include only artifacts that match the given pattern (e.g., ["app/", "package.*"]).
     */
    withDirectory: (path: string, directory: Directory, opts?: DirectoryWithDirectoryOpts) => Directory;
    /**
     * Retrieves this directory plus the contents of the given file copied to the given path.
     * @param path Location of the copied file (e.g., "/file.txt").
     * @param source Identifier of the file to copy.
     * @param opts.permissions Permission given to the copied file (e.g., 0600).
     */
    withFile: (path: string, source: File, opts?: DirectoryWithFileOpts) => Directory;
    /**
     * Retrieves this directory plus a new directory created at the given path.
     * @param path Location of the directory created (e.g., "/logs").
     * @param opts.permissions Permission granted to the created directory (e.g., 0777).
     */
    withNewDirectory: (path: string, opts?: DirectoryWithNewDirectoryOpts) => Directory;
    /**
     * Retrieves this directory plus a new file written at the given path.
     * @param path Location of the written file (e.g., "/file.txt").
     * @param contents Content of the written file (e.g., "Hello world!").
     * @param opts.permissions Permission given to the copied file (e.g., 0600).
     */
    withNewFile: (path: string, contents: string, opts?: DirectoryWithNewFileOpts) => Directory;
    /**
     * Retrieves this directory with all file/dir timestamps set to the given time.
     * @param timestamp Timestamp to set dir/files in.
     *
     * Formatted in seconds following Unix epoch (e.g., 1672531199).
     */
    withTimestamps: (timestamp: number) => Directory;
    /**
     * Retrieves this directory with the directory at the given path removed.
     * @param path Location of the directory to remove (e.g., ".github/").
     */
    withoutDirectory: (path: string) => Directory;
    /**
     * Retrieves this directory with the file at the given path removed.
     * @param path Location of the file to remove (e.g., "/file.txt").
     */
    withoutFile: (path: string) => Directory;
    /**
     * Call the provided function with current Directory.
     *
     * This is useful for reusability and readability by not breaking the calling chain.
     */
    with: (arg: (param: Directory) => Directory) => Directory;
}
/**
 * An environment variable name and value.
 */
export declare class EnvVariable extends BaseClient {
    private readonly _id?;
    private readonly _name?;
    private readonly _value?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: EnvVariableID, _name?: string, _value?: string);
    /**
     * A unique identifier for this EnvVariable.
     */
    id: () => Promise<EnvVariableID>;
    /**
     * The environment variable name.
     */
    name: () => Promise<string>;
    /**
     * The environment variable value.
     */
    value: () => Promise<string>;
}
/**
 * A definition of a field on a custom object defined in a Module.
 *
 * A field on an object has a static value, as opposed to a function on an object whose value is computed by invoking code (and can accept arguments).
 */
export declare class FieldTypeDef extends BaseClient {
    private readonly _id?;
    private readonly _description?;
    private readonly _name?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: FieldTypeDefID, _description?: string, _name?: string);
    /**
     * A unique identifier for this FieldTypeDef.
     */
    id: () => Promise<FieldTypeDefID>;
    /**
     * A doc string for the field, if any.
     */
    description: () => Promise<string>;
    /**
     * The name of the field in lowerCamelCase format.
     */
    name: () => Promise<string>;
    /**
     * The type of the field.
     */
    typeDef: () => TypeDef;
}
/**
 * A file.
 */
export declare class File extends BaseClient {
    private readonly _id?;
    private readonly _contents?;
    private readonly _export?;
    private readonly _name?;
    private readonly _size?;
    private readonly _sync?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: FileID, _contents?: string, _export?: boolean, _name?: string, _size?: number, _sync?: FileID);
    /**
     * A unique identifier for this File.
     */
    id: () => Promise<FileID>;
    /**
     * Retrieves the contents of the file.
     */
    contents: () => Promise<string>;
    /**
     * Writes the file to a file path on the host.
     * @param path Location of the written directory (e.g., "output.txt").
     * @param opts.allowParentDirPath If allowParentDirPath is true, the path argument can be a directory path, in which case the file will be created in that directory.
     */
    export: (path: string, opts?: FileExportOpts) => Promise<boolean>;
    /**
     * Retrieves the name of the file.
     */
    name: () => Promise<string>;
    /**
     * Retrieves the size of the file, in bytes.
     */
    size: () => Promise<number>;
    /**
     * Force evaluation in the engine.
     */
    sync: () => Promise<File>;
    /**
     * Retrieves this file with its created/modified timestamps set to the given time.
     * @param timestamp Timestamp to set dir/files in.
     *
     * Formatted in seconds following Unix epoch (e.g., 1672531199).
     */
    withTimestamps: (timestamp: number) => File;
    /**
     * Call the provided function with current File.
     *
     * This is useful for reusability and readability by not breaking the calling chain.
     */
    with: (arg: (param: File) => File) => File;
}
/**
 * Function represents a resolver provided by a Module.
 *
 * A function always evaluates against a parent object and is given a set of named arguments.
 */
export declare class Function_ extends BaseClient {
    private readonly _id?;
    private readonly _description?;
    private readonly _name?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: FunctionID, _description?: string, _name?: string);
    /**
     * A unique identifier for this Function.
     */
    id: () => Promise<FunctionID>;
    /**
     * Arguments accepted by the function, if any.
     */
    args: () => Promise<FunctionArg[]>;
    /**
     * A doc string for the function, if any.
     */
    description: () => Promise<string>;
    /**
     * The name of the function.
     */
    name: () => Promise<string>;
    /**
     * The type returned by the function.
     */
    returnType: () => TypeDef;
    /**
     * Returns the function with the provided argument
     * @param name The name of the argument
     * @param typeDef The type of the argument
     * @param opts.description A doc string for the argument, if any
     * @param opts.defaultValue A default value to use for this argument if not explicitly set by the caller, if any
     */
    withArg: (name: string, typeDef: TypeDef, opts?: FunctionWithArgOpts) => Function_;
    /**
     * Returns the function with the given doc string.
     * @param description The doc string to set.
     */
    withDescription: (description: string) => Function_;
    /**
     * Call the provided function with current Function.
     *
     * This is useful for reusability and readability by not breaking the calling chain.
     */
    with: (arg: (param: Function_) => Function_) => Function_;
}
/**
 * An argument accepted by a function.
 *
 * This is a specification for an argument at function definition time, not an argument passed at function call time.
 */
export declare class FunctionArg extends BaseClient {
    private readonly _id?;
    private readonly _defaultValue?;
    private readonly _description?;
    private readonly _name?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: FunctionArgID, _defaultValue?: JSON, _description?: string, _name?: string);
    /**
     * A unique identifier for this FunctionArg.
     */
    id: () => Promise<FunctionArgID>;
    /**
     * A default value to use for this argument when not explicitly set by the caller, if any.
     */
    defaultValue: () => Promise<JSON>;
    /**
     * A doc string for the argument, if any.
     */
    description: () => Promise<string>;
    /**
     * The name of the argument in lowerCamelCase format.
     */
    name: () => Promise<string>;
    /**
     * The type of the argument.
     */
    typeDef: () => TypeDef;
}
/**
 * An active function call.
 */
export declare class FunctionCall extends BaseClient {
    private readonly _id?;
    private readonly _name?;
    private readonly _parent?;
    private readonly _parentName?;
    private readonly _returnValue?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: FunctionCallID, _name?: string, _parent?: JSON, _parentName?: string, _returnValue?: Void);
    /**
     * A unique identifier for this FunctionCall.
     */
    id: () => Promise<FunctionCallID>;
    /**
     * The argument values the function is being invoked with.
     */
    inputArgs: () => Promise<FunctionCallArgValue[]>;
    /**
     * The name of the function being called.
     */
    name: () => Promise<string>;
    /**
     * The value of the parent object of the function being called. If the function is top-level to the module, this is always an empty object.
     */
    parent: () => Promise<JSON>;
    /**
     * The name of the parent object of the function being called. If the function is top-level to the module, this is the name of the module.
     */
    parentName: () => Promise<string>;
    /**
     * Set the return value of the function call to the provided value.
     * @param value JSON serialization of the return value.
     */
    returnValue: (value: JSON) => Promise<Void>;
}
/**
 * A value passed as a named argument to a function call.
 */
export declare class FunctionCallArgValue extends BaseClient {
    private readonly _id?;
    private readonly _name?;
    private readonly _value?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: FunctionCallArgValueID, _name?: string, _value?: JSON);
    /**
     * A unique identifier for this FunctionCallArgValue.
     */
    id: () => Promise<FunctionCallArgValueID>;
    /**
     * The name of the argument.
     */
    name: () => Promise<string>;
    /**
     * The value of the argument represented as a JSON serialized string.
     */
    value: () => Promise<JSON>;
}
/**
 * The result of running an SDK's codegen.
 */
export declare class GeneratedCode extends BaseClient {
    private readonly _id?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: GeneratedCodeID);
    /**
     * A unique identifier for this GeneratedCode.
     */
    id: () => Promise<GeneratedCodeID>;
    /**
     * The directory containing the generated code.
     */
    code: () => Directory;
    /**
     * List of paths to mark generated in version control (i.e. .gitattributes).
     */
    vcsGeneratedPaths: () => Promise<string[]>;
    /**
     * List of paths to ignore in version control (i.e. .gitignore).
     */
    vcsIgnoredPaths: () => Promise<string[]>;
    /**
     * Set the list of paths to mark generated in version control.
     */
    withVCSGeneratedPaths: (paths: string[]) => GeneratedCode;
    /**
     * Set the list of paths to ignore in version control.
     */
    withVCSIgnoredPaths: (paths: string[]) => GeneratedCode;
    /**
     * Call the provided function with current GeneratedCode.
     *
     * This is useful for reusability and readability by not breaking the calling chain.
     */
    with: (arg: (param: GeneratedCode) => GeneratedCode) => GeneratedCode;
}
/**
 * Module source originating from a git repo.
 */
export declare class GitModuleSource extends BaseClient {
    private readonly _id?;
    private readonly _cloneURL?;
    private readonly _commit?;
    private readonly _htmlURL?;
    private readonly _rootSubpath?;
    private readonly _version?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: GitModuleSourceID, _cloneURL?: string, _commit?: string, _htmlURL?: string, _rootSubpath?: string, _version?: string);
    /**
     * A unique identifier for this GitModuleSource.
     */
    id: () => Promise<GitModuleSourceID>;
    /**
     * The URL from which the source's git repo can be cloned.
     */
    cloneURL: () => Promise<string>;
    /**
     * The resolved commit of the git repo this source points to.
     */
    commit: () => Promise<string>;
    /**
     * The directory containing everything needed to load load and use the module.
     */
    contextDirectory: () => Directory;
    /**
     * The URL to the source's git repo in a web browser
     */
    htmlURL: () => Promise<string>;
    /**
     * The path to the root of the module source under the context directory. This directory contains its configuration file. It also contains its source code (possibly as a subdirectory).
     */
    rootSubpath: () => Promise<string>;
    /**
     * The specified version of the git repo this source points to.
     */
    version: () => Promise<string>;
}
/**
 * A git ref (tag, branch, or commit).
 */
export declare class GitRef extends BaseClient {
    private readonly _id?;
    private readonly _commit?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: GitRefID, _commit?: string);
    /**
     * A unique identifier for this GitRef.
     */
    id: () => Promise<GitRefID>;
    /**
     * The resolved commit id at this ref.
     */
    commit: () => Promise<string>;
    /**
     * The filesystem tree at this ref.
     * @param opts.sshKnownHosts DEPRECATED: This option should be passed to `git` instead.
     * @param opts.sshAuthSocket DEPRECATED: This option should be passed to `git` instead.
     */
    tree: (opts?: GitRefTreeOpts) => Directory;
}
/**
 * A git repository.
 */
export declare class GitRepository extends BaseClient {
    private readonly _id?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: GitRepositoryID);
    /**
     * A unique identifier for this GitRepository.
     */
    id: () => Promise<GitRepositoryID>;
    /**
     * Returns details of a branch.
     * @param name Branch's name (e.g., "main").
     */
    branch: (name: string) => GitRef;
    /**
     * Returns details of a commit.
     * @param id Identifier of the commit (e.g., "b6315d8f2810962c601af73f86831f6866ea798b").
     */
    commit: (id: string) => GitRef;
    /**
     * Returns details of a ref.
     * @param name Ref's name (can be a commit identifier, a tag name, a branch name, or a fully-qualified ref).
     */
    ref: (name: string) => GitRef;
    /**
     * Returns details of a tag.
     * @param name Tag's name (e.g., "v0.3.9").
     */
    tag: (name: string) => GitRef;
}
/**
 * Information about the host environment.
 */
export declare class Host extends BaseClient {
    private readonly _id?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: HostID);
    /**
     * A unique identifier for this Host.
     */
    id: () => Promise<HostID>;
    /**
     * Accesses a directory on the host.
     * @param path Location of the directory to access (e.g., ".").
     * @param opts.exclude Exclude artifacts that match the given pattern (e.g., ["node_modules/", ".git*"]).
     * @param opts.include Include only artifacts that match the given pattern (e.g., ["app/", "package.*"]).
     */
    directory: (path: string, opts?: HostDirectoryOpts) => Directory;
    /**
     * Accesses a file on the host.
     * @param path Location of the file to retrieve (e.g., "README.md").
     */
    file: (path: string) => File;
    /**
     * Creates a service that forwards traffic to a specified address via the host.
     * @param opts.host Upstream host to forward traffic to.
     * @param opts.ports Ports to expose via the service, forwarding through the host network.
     *
     * If a port's frontend is unspecified or 0, it defaults to the same as the backend port.
     *
     * An empty set of ports is not valid; an error will be returned.
     */
    service: (opts?: HostServiceOpts) => Service;
    /**
     * Sets a secret given a user-defined name and the file path on the host, and returns the secret.
     *
     * The file is limited to a size of 512000 bytes.
     * @param name The user defined name for this secret.
     * @param path Location of the file to set as a secret.
     */
    setSecretFile: (name: string, path: string) => Secret;
    /**
     * Creates a tunnel that forwards traffic from the host to a service.
     * @param service Service to send traffic from the tunnel.
     * @param opts.ports Configure explicit port forwarding rules for the tunnel.
     *
     * If a port's frontend is unspecified or 0, a random port will be chosen by the host.
     *
     * If no ports are given, all of the service's ports are forwarded. If native is true, each port maps to the same port on the host. If native is false, each port maps to a random port chosen by the host.
     *
     * If ports are given and native is true, the ports are additive.
     * @param opts.native Map each service port to the same port on the host, as if the service were running natively.
     *
     * Note: enabling may result in port conflicts.
     */
    tunnel: (service: Service, opts?: HostTunnelOpts) => Service;
    /**
     * Accesses a Unix socket on the host.
     * @param path Location of the Unix socket (e.g., "/var/run/docker.sock").
     */
    unixSocket: (path: string) => Socket;
}
/**
 * A graphql input type, which is essentially just a group of named args.
 * This is currently only used to represent pre-existing usage of graphql input types
 * in the core API. It is not used by user modules and shouldn't ever be as user
 * module accept input objects via their id rather than graphql input types.
 */
export declare class InputTypeDef extends BaseClient {
    private readonly _id?;
    private readonly _name?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: InputTypeDefID, _name?: string);
    /**
     * A unique identifier for this InputTypeDef.
     */
    id: () => Promise<InputTypeDefID>;
    /**
     * Static fields defined on this input object, if any.
     */
    fields: () => Promise<FieldTypeDef[]>;
    /**
     * The name of the input object.
     */
    name: () => Promise<string>;
}
/**
 * A definition of a custom interface defined in a Module.
 */
export declare class InterfaceTypeDef extends BaseClient {
    private readonly _id?;
    private readonly _description?;
    private readonly _name?;
    private readonly _sourceModuleName?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: InterfaceTypeDefID, _description?: string, _name?: string, _sourceModuleName?: string);
    /**
     * A unique identifier for this InterfaceTypeDef.
     */
    id: () => Promise<InterfaceTypeDefID>;
    /**
     * The doc string for the interface, if any.
     */
    description: () => Promise<string>;
    /**
     * Functions defined on this interface, if any.
     */
    functions: () => Promise<Function_[]>;
    /**
     * The name of the interface.
     */
    name: () => Promise<string>;
    /**
     * If this InterfaceTypeDef is associated with a Module, the name of the module. Unset otherwise.
     */
    sourceModuleName: () => Promise<string>;
}
/**
 * A simple key value object that represents a label.
 */
export declare class Label extends BaseClient {
    private readonly _id?;
    private readonly _name?;
    private readonly _value?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: LabelID, _name?: string, _value?: string);
    /**
     * A unique identifier for this Label.
     */
    id: () => Promise<LabelID>;
    /**
     * The label name.
     */
    name: () => Promise<string>;
    /**
     * The label value.
     */
    value: () => Promise<string>;
}
/**
 * A definition of a list type in a Module.
 */
export declare class ListTypeDef extends BaseClient {
    private readonly _id?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: ListTypeDefID);
    /**
     * A unique identifier for this ListTypeDef.
     */
    id: () => Promise<ListTypeDefID>;
    /**
     * The type of the elements in the list.
     */
    elementTypeDef: () => TypeDef;
}
/**
 * Module source that that originates from a path locally relative to an arbitrary directory.
 */
export declare class LocalModuleSource extends BaseClient {
    private readonly _id?;
    private readonly _rootSubpath?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: LocalModuleSourceID, _rootSubpath?: string);
    /**
     * A unique identifier for this LocalModuleSource.
     */
    id: () => Promise<LocalModuleSourceID>;
    /**
     * The directory containing everything needed to load load and use the module.
     */
    contextDirectory: () => Directory;
    /**
     * The path to the root of the module source under the context directory. This directory contains its configuration file. It also contains its source code (possibly as a subdirectory).
     */
    rootSubpath: () => Promise<string>;
}
/**
 * A Dagger module.
 */
export declare class Module_ extends BaseClient {
    private readonly _id?;
    private readonly _description?;
    private readonly _name?;
    private readonly _sdk?;
    private readonly _serve?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: ModuleID, _description?: string, _name?: string, _sdk?: string, _serve?: Void);
    /**
     * A unique identifier for this Module.
     */
    id: () => Promise<ModuleID>;
    /**
     * Modules used by this module.
     */
    dependencies: () => Promise<Module_[]>;
    /**
     * The dependencies as configured by the module.
     */
    dependencyConfig: () => Promise<ModuleDependency[]>;
    /**
     * The doc string of the module, if any
     */
    description: () => Promise<string>;
    /**
     * The generated files and directories made on top of the module source's context directory.
     */
    generatedContextDiff: () => Directory;
    /**
     * The module source's context plus any configuration and source files created by codegen.
     */
    generatedContextDirectory: () => Directory;
    /**
     * Retrieves the module with the objects loaded via its SDK.
     */
    initialize: () => Module_;
    /**
     * Interfaces served by this module.
     */
    interfaces: () => Promise<TypeDef[]>;
    /**
     * The name of the module
     */
    name: () => Promise<string>;
    /**
     * Objects served by this module.
     */
    objects: () => Promise<TypeDef[]>;
    /**
     * The container that runs the module's entrypoint. It will fail to execute if the module doesn't compile.
     */
    runtime: () => Container;
    /**
     * The SDK used by this module. Either a name of a builtin SDK or a module source ref string pointing to the SDK's implementation.
     */
    sdk: () => Promise<string>;
    /**
     * Serve a module's API in the current session.
     *
     * Note: this can only be called once per session. In the future, it could return a stream or service to remove the side effect.
     */
    serve: () => Promise<Void>;
    /**
     * The source for the module.
     */
    source: () => ModuleSource;
    /**
     * Retrieves the module with the given description
     * @param description The description to set
     */
    withDescription: (description: string) => Module_;
    /**
     * This module plus the given Interface type and associated functions
     */
    withInterface: (iface: TypeDef) => Module_;
    /**
     * This module plus the given Object type and associated functions.
     */
    withObject: (object: TypeDef) => Module_;
    /**
     * Retrieves the module with basic configuration loaded if present.
     * @param source The module source to initialize from.
     */
    withSource: (source: ModuleSource) => Module_;
    /**
     * Call the provided function with current Module.
     *
     * This is useful for reusability and readability by not breaking the calling chain.
     */
    with: (arg: (param: Module_) => Module_) => Module_;
}
/**
 * The configuration of dependency of a module.
 */
export declare class ModuleDependency extends BaseClient {
    private readonly _id?;
    private readonly _name?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: ModuleDependencyID, _name?: string);
    /**
     * A unique identifier for this ModuleDependency.
     */
    id: () => Promise<ModuleDependencyID>;
    /**
     * The name of the dependency module.
     */
    name: () => Promise<string>;
    /**
     * The source for the dependency module.
     */
    source: () => ModuleSource;
}
/**
 * The source needed to load and run a module, along with any metadata about the source such as versions/urls/etc.
 */
export declare class ModuleSource extends BaseClient {
    private readonly _id?;
    private readonly _asString?;
    private readonly _configExists?;
    private readonly _kind?;
    private readonly _moduleName?;
    private readonly _moduleOriginalName?;
    private readonly _resolveContextPathFromCaller?;
    private readonly _sourceRootSubpath?;
    private readonly _sourceSubpath?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: ModuleSourceID, _asString?: string, _configExists?: boolean, _kind?: ModuleSourceKind, _moduleName?: string, _moduleOriginalName?: string, _resolveContextPathFromCaller?: string, _sourceRootSubpath?: string, _sourceSubpath?: string);
    /**
     * A unique identifier for this ModuleSource.
     */
    id: () => Promise<ModuleSourceID>;
    /**
     * If the source is a of kind git, the git source representation of it.
     */
    asGitSource: () => GitModuleSource;
    /**
     * If the source is of kind local, the local source representation of it.
     */
    asLocalSource: () => LocalModuleSource;
    /**
     * Load the source as a module. If this is a local source, the parent directory must have been provided during module source creation
     */
    asModule: () => Module_;
    /**
     * A human readable ref string representation of this module source.
     */
    asString: () => Promise<string>;
    /**
     * Returns whether the module source has a configuration file.
     */
    configExists: () => Promise<boolean>;
    /**
     * The directory containing everything needed to load load and use the module.
     */
    contextDirectory: () => Directory;
    /**
     * The dependencies of the module source. Includes dependencies from the configuration and any extras from withDependencies calls.
     */
    dependencies: () => Promise<ModuleDependency[]>;
    /**
     * The directory containing the module configuration and source code (source code may be in a subdir).
     * @param path The path from the source directory to select.
     */
    directory: (path: string) => Directory;
    /**
     * The kind of source (e.g. local, git, etc.)
     */
    kind: () => Promise<ModuleSourceKind>;
    /**
     * If set, the name of the module this source references, including any overrides at runtime by callers.
     */
    moduleName: () => Promise<string>;
    /**
     * The original name of the module this source references, as defined in the module configuration.
     */
    moduleOriginalName: () => Promise<string>;
    /**
     * The path to the module source's context directory on the caller's filesystem. Only valid for local sources.
     */
    resolveContextPathFromCaller: () => Promise<string>;
    /**
     * Resolve the provided module source arg as a dependency relative to this module source.
     * @param dep The dependency module source to resolve.
     */
    resolveDependency: (dep: ModuleSource) => ModuleSource;
    /**
     * Load the source from its path on the caller's filesystem, including only needed+configured files and directories. Only valid for local sources.
     */
    resolveFromCaller: () => ModuleSource;
    /**
     * The path relative to context of the root of the module source, which contains dagger.json. It also contains the module implementation source code, but that may or may not being a subdir of this root.
     */
    sourceRootSubpath: () => Promise<string>;
    /**
     * The path relative to context of the module implementation source code.
     */
    sourceSubpath: () => Promise<string>;
    /**
     * Update the module source with a new context directory. Only valid for local sources.
     * @param dir The directory to set as the context directory.
     */
    withContextDirectory: (dir: Directory) => ModuleSource;
    /**
     * Append the provided dependencies to the module source's dependency list.
     * @param dependencies The dependencies to append.
     */
    withDependencies: (dependencies: ModuleDependency[]) => ModuleSource;
    /**
     * Update the module source with a new name.
     * @param name The name to set.
     */
    withName: (name: string) => ModuleSource;
    /**
     * Update the module source with a new SDK.
     * @param sdk The SDK to set.
     */
    withSDK: (sdk: string) => ModuleSource;
    /**
     * Update the module source with a new source subpath.
     * @param path The path to set as the source subpath.
     */
    withSourceSubpath: (path: string) => ModuleSource;
    /**
     * Call the provided function with current ModuleSource.
     *
     * This is useful for reusability and readability by not breaking the calling chain.
     */
    with: (arg: (param: ModuleSource) => ModuleSource) => ModuleSource;
}
/**
 * A definition of a custom object defined in a Module.
 */
export declare class ObjectTypeDef extends BaseClient {
    private readonly _id?;
    private readonly _description?;
    private readonly _name?;
    private readonly _sourceModuleName?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: ObjectTypeDefID, _description?: string, _name?: string, _sourceModuleName?: string);
    /**
     * A unique identifier for this ObjectTypeDef.
     */
    id: () => Promise<ObjectTypeDefID>;
    /**
     * The function used to construct new instances of this object, if any
     */
    constructor_: () => Function_;
    /**
     * The doc string for the object, if any.
     */
    description: () => Promise<string>;
    /**
     * Static fields defined on this object, if any.
     */
    fields: () => Promise<FieldTypeDef[]>;
    /**
     * Functions defined on this object, if any.
     */
    functions: () => Promise<Function_[]>;
    /**
     * The name of the object.
     */
    name: () => Promise<string>;
    /**
     * If this ObjectTypeDef is associated with a Module, the name of the module. Unset otherwise.
     */
    sourceModuleName: () => Promise<string>;
}
/**
 * A port exposed by a container.
 */
export declare class Port extends BaseClient {
    private readonly _id?;
    private readonly _description?;
    private readonly _experimentalSkipHealthcheck?;
    private readonly _port?;
    private readonly _protocol?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: PortID, _description?: string, _experimentalSkipHealthcheck?: boolean, _port?: number, _protocol?: NetworkProtocol);
    /**
     * A unique identifier for this Port.
     */
    id: () => Promise<PortID>;
    /**
     * The port description.
     */
    description: () => Promise<string>;
    /**
     * Skip the health check when run as a service.
     */
    experimentalSkipHealthcheck: () => Promise<boolean>;
    /**
     * The port number.
     */
    port: () => Promise<number>;
    /**
     * The transport layer protocol.
     */
    protocol: () => Promise<NetworkProtocol>;
}
/**
 * The root of the DAG.
 */
export declare class Client extends BaseClient {
    private readonly _checkVersionCompatibility?;
    private readonly _defaultPlatform?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _checkVersionCompatibility?: boolean, _defaultPlatform?: Platform);
    /**
     * Retrieves a content-addressed blob.
     * @param digest Digest of the blob
     * @param size Size of the blob
     * @param mediaType Media type of the blob
     * @param uncompressed Digest of the uncompressed blob
     */
    blob: (digest: string, size: number, mediaType: string, uncompressed: string) => Directory;
    /**
     * Constructs a cache volume for a given cache key.
     * @param key A string identifier to target this cache volume (e.g., "modules-cache").
     */
    cacheVolume: (key: string) => CacheVolume;
    /**
     * Checks if the current Dagger Engine is compatible with an SDK's required version.
     * @param version Version required by the SDK.
     */
    checkVersionCompatibility: (version: string) => Promise<boolean>;
    /**
     * Creates a scratch container.
     *
     * Optional platform argument initializes new containers to execute and publish as that platform. Platform defaults to that of the builder's host.
     * @param opts.id DEPRECATED: Use `loadContainerFromID` instead.
     * @param opts.platform Platform to initialize the container with.
     */
    container: (opts?: ClientContainerOpts) => Container;
    /**
     * The FunctionCall context that the SDK caller is currently executing in.
     *
     * If the caller is not currently executing in a function, this will return an error.
     */
    currentFunctionCall: () => FunctionCall;
    /**
     * The module currently being served in the session, if any.
     */
    currentModule: () => CurrentModule;
    /**
     * The TypeDef representations of the objects currently being served in the session.
     */
    currentTypeDefs: () => Promise<TypeDef[]>;
    /**
     * The default platform of the engine.
     */
    defaultPlatform: () => Promise<Platform>;
    /**
     * Creates an empty directory.
     * @param opts.id DEPRECATED: Use `loadDirectoryFromID` isntead.
     */
    directory: (opts?: ClientDirectoryOpts) => Directory;
    /**
     * @deprecated Use loadFileFromID instead.
     */
    file: (id: FileID) => File;
    /**
     * Creates a function.
     * @param name Name of the function, in its original format from the implementation language.
     * @param returnType Return type of the function.
     */
    function_: (name: string, returnType: TypeDef) => Function_;
    /**
     * Create a code generation result, given a directory containing the generated code.
     */
    generatedCode: (code: Directory) => GeneratedCode;
    /**
     * Queries a Git repository.
     * @param url URL of the git repository.
     *
     * Can be formatted as `https://{host}/{owner}/{repo}`, `git@{host}:{owner}/{repo}`.
     *
     * Suffix ".git" is optional.
     * @param opts.keepGitDir Set to true to keep .git directory.
     * @param opts.experimentalServiceHost A service which must be started before the repo is fetched.
     * @param opts.sshKnownHosts Set SSH known hosts
     * @param opts.sshAuthSocket Set SSH auth socket
     */
    git: (url: string, opts?: ClientGitOpts) => GitRepository;
    /**
     * Queries the host environment.
     */
    host: () => Host;
    /**
     * Returns a file containing an http remote url content.
     * @param url HTTP url to get the content from (e.g., "https://docs.dagger.io").
     * @param opts.experimentalServiceHost A service which must be started before the URL is fetched.
     */
    http: (url: string, opts?: ClientHttpOpts) => File;
    /**
     * Load a CacheVolume from its ID.
     */
    loadCacheVolumeFromID: (id: CacheVolumeID) => CacheVolume;
    /**
     * Load a Container from its ID.
     */
    loadContainerFromID: (id: ContainerID) => Container;
    /**
     * Load a CurrentModule from its ID.
     */
    loadCurrentModuleFromID: (id: CurrentModuleID) => CurrentModule;
    /**
     * Load a Directory from its ID.
     */
    loadDirectoryFromID: (id: DirectoryID) => Directory;
    /**
     * Load a EnvVariable from its ID.
     */
    loadEnvVariableFromID: (id: EnvVariableID) => EnvVariable;
    /**
     * Load a FieldTypeDef from its ID.
     */
    loadFieldTypeDefFromID: (id: FieldTypeDefID) => FieldTypeDef;
    /**
     * Load a File from its ID.
     */
    loadFileFromID: (id: FileID) => File;
    /**
     * Load a FunctionArg from its ID.
     */
    loadFunctionArgFromID: (id: FunctionArgID) => FunctionArg;
    /**
     * Load a FunctionCallArgValue from its ID.
     */
    loadFunctionCallArgValueFromID: (id: FunctionCallArgValueID) => FunctionCallArgValue;
    /**
     * Load a FunctionCall from its ID.
     */
    loadFunctionCallFromID: (id: FunctionCallID) => FunctionCall;
    /**
     * Load a Function from its ID.
     */
    loadFunctionFromID: (id: FunctionID) => Function_;
    /**
     * Load a GeneratedCode from its ID.
     */
    loadGeneratedCodeFromID: (id: GeneratedCodeID) => GeneratedCode;
    /**
     * Load a GitModuleSource from its ID.
     */
    loadGitModuleSourceFromID: (id: GitModuleSourceID) => GitModuleSource;
    /**
     * Load a GitRef from its ID.
     */
    loadGitRefFromID: (id: GitRefID) => GitRef;
    /**
     * Load a GitRepository from its ID.
     */
    loadGitRepositoryFromID: (id: GitRepositoryID) => GitRepository;
    /**
     * Load a Host from its ID.
     */
    loadHostFromID: (id: HostID) => Host;
    /**
     * Load a InputTypeDef from its ID.
     */
    loadInputTypeDefFromID: (id: InputTypeDefID) => InputTypeDef;
    /**
     * Load a InterfaceTypeDef from its ID.
     */
    loadInterfaceTypeDefFromID: (id: InterfaceTypeDefID) => InterfaceTypeDef;
    /**
     * Load a Label from its ID.
     */
    loadLabelFromID: (id: LabelID) => Label;
    /**
     * Load a ListTypeDef from its ID.
     */
    loadListTypeDefFromID: (id: ListTypeDefID) => ListTypeDef;
    /**
     * Load a LocalModuleSource from its ID.
     */
    loadLocalModuleSourceFromID: (id: LocalModuleSourceID) => LocalModuleSource;
    /**
     * Load a ModuleDependency from its ID.
     */
    loadModuleDependencyFromID: (id: ModuleDependencyID) => ModuleDependency;
    /**
     * Load a Module from its ID.
     */
    loadModuleFromID: (id: ModuleID) => Module_;
    /**
     * Load a ModuleSource from its ID.
     */
    loadModuleSourceFromID: (id: ModuleSourceID) => ModuleSource;
    /**
     * Load a ObjectTypeDef from its ID.
     */
    loadObjectTypeDefFromID: (id: ObjectTypeDefID) => ObjectTypeDef;
    /**
     * Load a Port from its ID.
     */
    loadPortFromID: (id: PortID) => Port;
    /**
     * Load a Secret from its ID.
     */
    loadSecretFromID: (id: SecretID) => Secret;
    /**
     * Load a Service from its ID.
     */
    loadServiceFromID: (id: ServiceID) => Service;
    /**
     * Load a Socket from its ID.
     */
    loadSocketFromID: (id: SocketID) => Socket;
    /**
     * Load a Terminal from its ID.
     */
    loadTerminalFromID: (id: TerminalID) => Terminal;
    /**
     * Load a TypeDef from its ID.
     */
    loadTypeDefFromID: (id: TypeDefID) => TypeDef;
    /**
     * Create a new module.
     */
    module_: () => Module_;
    /**
     * Create a new module dependency configuration from a module source and name
     * @param source The source of the dependency
     * @param opts.name If set, the name to use for the dependency. Otherwise, once installed to a parent module, the name of the dependency module will be used by default.
     */
    moduleDependency: (source: ModuleSource, opts?: ClientModuleDependencyOpts) => ModuleDependency;
    /**
     * Create a new module source instance from a source ref string.
     * @param refString The string ref representation of the module source
     * @param opts.stable If true, enforce that the source is a stable version for source kinds that support versioning.
     */
    moduleSource: (refString: string, opts?: ClientModuleSourceOpts) => ModuleSource;
    /**
     * Creates a named sub-pipeline.
     * @param name Name of the sub-pipeline.
     * @param opts.description Description of the sub-pipeline.
     * @param opts.labels Labels to apply to the sub-pipeline.
     */
    pipeline: (name: string, opts?: ClientPipelineOpts) => Client;
    /**
     * Reference a secret by name.
     */
    secret: (name: string) => Secret;
    /**
     * Sets a secret given a user defined name to its plaintext and returns the secret.
     *
     * The plaintext value is limited to a size of 128000 bytes.
     * @param name The user defined name for this secret
     * @param plaintext The plaintext of the secret
     */
    setSecret: (name: string, plaintext: string) => Secret;
    /**
     * Loads a socket by its ID.
     * @deprecated Use loadSocketFromID instead.
     */
    socket: (id: SocketID) => Socket;
    /**
     * Create a new TypeDef.
     */
    typeDef: () => TypeDef;
    /**
     * Call the provided function with current Client.
     *
     * This is useful for reusability and readability by not breaking the calling chain.
     */
    with: (arg: (param: Client) => Client) => Client;
}
/**
 * A reference to a secret value, which can be handled more safely than the value itself.
 */
export declare class Secret extends BaseClient {
    private readonly _id?;
    private readonly _plaintext?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: SecretID, _plaintext?: string);
    /**
     * A unique identifier for this Secret.
     */
    id: () => Promise<SecretID>;
    /**
     * The value of this secret.
     */
    plaintext: () => Promise<string>;
}
/**
 * A content-addressed service providing TCP connectivity.
 */
export declare class Service extends BaseClient {
    private readonly _id?;
    private readonly _endpoint?;
    private readonly _hostname?;
    private readonly _start?;
    private readonly _stop?;
    private readonly _up?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: ServiceID, _endpoint?: string, _hostname?: string, _start?: ServiceID, _stop?: ServiceID, _up?: Void);
    /**
     * A unique identifier for this Service.
     */
    id: () => Promise<ServiceID>;
    /**
     * Retrieves an endpoint that clients can use to reach this container.
     *
     * If no port is specified, the first exposed port is used. If none exist an error is returned.
     *
     * If a scheme is specified, a URL is returned. Otherwise, a host:port pair is returned.
     * @param opts.port The exposed port number for the endpoint
     * @param opts.scheme Return a URL with the given scheme, eg. http for http://
     */
    endpoint: (opts?: ServiceEndpointOpts) => Promise<string>;
    /**
     * Retrieves a hostname which can be used by clients to reach this container.
     */
    hostname: () => Promise<string>;
    /**
     * Retrieves the list of ports provided by the service.
     */
    ports: () => Promise<Port[]>;
    /**
     * Start the service and wait for its health checks to succeed.
     *
     * Services bound to a Container do not need to be manually started.
     */
    start: () => Promise<Service>;
    /**
     * Stop the service.
     * @param opts.kill Immediately kill the service without waiting for a graceful exit
     */
    stop: (opts?: ServiceStopOpts) => Promise<Service>;
    /**
     * Creates a tunnel that forwards traffic from the caller's network to this service.
     * @param opts.ports List of frontend/backend port mappings to forward.
     *
     * Frontend is the port accepting traffic on the host, backend is the service port.
     * @param opts.random Bind each tunnel port to a random port on the host.
     */
    up: (opts?: ServiceUpOpts) => Promise<Void>;
}
/**
 * A Unix or TCP/IP socket that can be mounted into a container.
 */
export declare class Socket extends BaseClient {
    private readonly _id?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: SocketID);
    /**
     * A unique identifier for this Socket.
     */
    id: () => Promise<SocketID>;
}
/**
 * An interactive terminal that clients can connect to.
 */
export declare class Terminal extends BaseClient {
    private readonly _id?;
    private readonly _websocketEndpoint?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: TerminalID, _websocketEndpoint?: string);
    /**
     * A unique identifier for this Terminal.
     */
    id: () => Promise<TerminalID>;
    /**
     * An http endpoint at which this terminal can be connected to over a websocket.
     */
    websocketEndpoint: () => Promise<string>;
}
/**
 * A definition of a parameter or return type in a Module.
 */
export declare class TypeDef extends BaseClient {
    private readonly _id?;
    private readonly _kind?;
    private readonly _optional?;
    /**
     * Constructor is used for internal usage only, do not create object from it.
     */
    constructor(parent?: {
        queryTree?: QueryTree[];
        ctx: Context;
    }, _id?: TypeDefID, _kind?: TypeDefKind, _optional?: boolean);
    /**
     * A unique identifier for this TypeDef.
     */
    id: () => Promise<TypeDefID>;
    /**
     * If kind is INPUT, the input-specific type definition. If kind is not INPUT, this will be null.
     */
    asInput: () => InputTypeDef;
    /**
     * If kind is INTERFACE, the interface-specific type definition. If kind is not INTERFACE, this will be null.
     */
    asInterface: () => InterfaceTypeDef;
    /**
     * If kind is LIST, the list-specific type definition. If kind is not LIST, this will be null.
     */
    asList: () => ListTypeDef;
    /**
     * If kind is OBJECT, the object-specific type definition. If kind is not OBJECT, this will be null.
     */
    asObject: () => ObjectTypeDef;
    /**
     * The kind of type this is (e.g. primitive, list, object).
     */
    kind: () => Promise<TypeDefKind>;
    /**
     * Whether this type can be set to null. Defaults to false.
     */
    optional: () => Promise<boolean>;
    /**
     * Adds a function for constructing a new instance of an Object TypeDef, failing if the type is not an object.
     */
    withConstructor: (function_: Function_) => TypeDef;
    /**
     * Adds a static field for an Object TypeDef, failing if the type is not an object.
     * @param name The name of the field in the object
     * @param typeDef The type of the field
     * @param opts.description A doc string for the field, if any
     */
    withField: (name: string, typeDef: TypeDef, opts?: TypeDefWithFieldOpts) => TypeDef;
    /**
     * Adds a function for an Object or Interface TypeDef, failing if the type is not one of those kinds.
     */
    withFunction: (function_: Function_) => TypeDef;
    /**
     * Returns a TypeDef of kind Interface with the provided name.
     */
    withInterface: (name: string, opts?: TypeDefWithInterfaceOpts) => TypeDef;
    /**
     * Sets the kind of the type.
     */
    withKind: (kind: TypeDefKind) => TypeDef;
    /**
     * Returns a TypeDef of kind List with the provided type for its elements.
     */
    withListOf: (elementType: TypeDef) => TypeDef;
    /**
     * Returns a TypeDef of kind Object with the provided name.
     *
     * Note that an object's fields and functions may be omitted if the intent is only to refer to an object. This is how functions are able to return their own object, or any other circular reference.
     */
    withObject: (name: string, opts?: TypeDefWithObjectOpts) => TypeDef;
    /**
     * Sets whether this type can be set to null.
     */
    withOptional: (optional: boolean) => TypeDef;
    /**
     * Call the provided function with current TypeDef.
     *
     * This is useful for reusability and readability by not breaking the calling chain.
     */
    with: (arg: (param: TypeDef) => TypeDef) => TypeDef;
}
export declare const dag: Client;
export {};
//# sourceMappingURL=client.gen.d.ts.map