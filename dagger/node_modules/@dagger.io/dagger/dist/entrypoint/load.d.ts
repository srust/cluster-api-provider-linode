import { TypeDefKind } from "../api/client.gen.js";
import { ScanResult } from "../introspector/scanner/scan.js";
import { TypeDef } from "../introspector/scanner/typeDefs.js";
/**
 * Import all given typescript files so that trigger their decorators
 * and register their class and functions inside the Registry.
 *
 * @param files List of files to load.
 */
export declare function load(files: string[]): Promise<void>;
/**
 * Load the order of arguments for a given function from the scan result.
 *
 * @param scanResult The result of the scan.
 * @param parentName The name of the class.
 * @param fnName The name of the function.
 *
 * @returns An array of strings representing the order of arguments.
 */
export declare function loadArgOrder(scanResult: ScanResult, parentName: string, fnName: string): string[];
/**
 * Load the argument for the given function and check if it's variadic.
 *
 * @param scanResult The result of the scan.
 * @param parentName The name of the class.
 * @param fnName The name of the function.
 * @param argName The name of the argument.
 *
 * @returns True if the argument is variadic, false otherwise.
 */
export declare function isArgVariadic(scanResult: ScanResult, parentName: string, fnName: string, argName: string): boolean;
/**
 * Load the argument type from the scan result.
 *
 * @param scanResult Result of the scan
 * @param parentName Class called
 * @param fnName Function called
 * @param argName Argument name
 * @returns The type of the argument
 */
export declare function loadArgType(scanResult: ScanResult, parentName: string, fnName: string, argName: string): TypeDef<TypeDefKind>;
/**
 * Load the property type from the scan result.
 *
 * @param scanResult Result of the scan
 * @param parentName Class called
 * @param propertyName property of the class
 * @returns the type of the property
 */
export declare function loadPropertyType(scanResult: ScanResult, parentName: string, propertyName: string): TypeDef<TypeDefKind>;
/**
 * Load the true name from the scan result
 *
 * @param scanResult Result of the scan
 * @param parentName Class called
 * @param alias exposed name
 * @param kind location of the alias
 */
export declare function loadName(scanResult: ScanResult, parentName: string, alias: string, kind: "field" | "function" | "object"): string;
/**
 * Load the alias from the true property name.
 * If not found, return the original alias because it's not
 * a registered field.
 *
 * @param scanResult Result of the scan
 * @param parentName Class called
 * @param alias exposed name
 */
export declare function loadResultAlias(scanResult: ScanResult, parentName: string, alias: string): string;
/**
 * Return the eventual parent name of a field if its return type is a
 * registered object.
 * If not found, return the original parent name.
 *
 * @param scanResult The result of the scan.
 * @param parentName Original parent name
 * @param alias The field alias
 */
export declare function loadAliasParentName(scanResult: ScanResult, parentName: string, alias: string): string;
/**
 * This function load the argument as a Dagger type.
 *
 * Note: The JSON.parse() is required to remove extra quotes
 */
export declare function loadArg(value: any, type: TypeDef<TypeDefKind>): Promise<any>;
/**
 * Load subfields of the result and IDable object.
 *
 * @param result The result of the invocation.
 * @param scanResult The result of the scan.
 * @param parentName The name of the parent object.
 * @returns Loaded result.
 */
export declare function loadResult(result: any, scanResult: ScanResult, parentName: string): Promise<any>;
//# sourceMappingURL=load.d.ts.map