import "reflect-metadata";
export type Class = {
    new (...args: any[]): any;
};
export type State = {
    [property: string]: any;
};
export type Args = Record<string, unknown>;
/**
 * Registry stores class and method that have the @object decorator.
 *
 * This is a convenient way to make possible the invocation of class' function.
 *
 * The decorator @object store the class into the Registry, but also all the
 * users method's name.
 * It doesn't consider the `@func` or `field` decorators because this is
 * used by the Dagger API to know what to expose or not.
 * This might lead to unnecessary data register into the registry, but
 * we use map as datastructure to optimize the searching process
 * since we directly look through a key into the `class_` member of
 * RegistryClass.
 */
export declare class Registry {
    /**
     * The definition of the @object decorator that should be on top of any
     * class module that must be exposed to the Dagger API.
     *
     */
    object: () => <T extends Class>(constructor: T) => T;
    /**
     * The definition of @field decorator that should be on top of any
     * class' property that must be exposed to the Dagger API.
     *
     * @param alias The alias to use for the field when exposed on the API.
     */
    field: (alias?: string) => (target: object, propertyKey: string) => void;
    /**
     * The definition of @func decorator that should be on top of any
     * class' method that must be exposed to the Dagger API.
     */
    func: (alias?: string) => (target: object, propertyKey: string | symbol, descriptor: PropertyDescriptor) => void;
    /**
     * getResult check for the object and method in the registry and call it
     * with the given input and state.
     *
     * This is the function responsible for any module methods execution.
     *
     * @param object The class to look for
     * @param method The method to call in the class
     * @param state The current state of the class
     * @param inputs The input to send to the method to call
     */
    getResult(object: string, method: string, state: State, inputs: Args): Promise<any>;
}
/**
 * The default registry used in any module.
 */
export declare const registry: Registry;
//# sourceMappingURL=registry.d.ts.map