import ts from "typescript";
import { TypeDefKind } from "../../api/client.gen.js";
import { TypeDef } from "./typeDefs.js";
/**
 * Return true if the given class declaration has the decorator @obj() on
 * top of its declaration.
 * @param object
 */
export declare function isObject(object: ts.ClassDeclaration): boolean;
/**
 * Check if the class is the main object of the module.
 *
 * @param classtName The name of the class to check.
 * @param moduleName The name of the module.
 */
export declare function isMainObject(className: string, moduleName: string): boolean;
/**
 * Return true if the given method has the decorator @fct() on top
 * of its declaration.
 *
 * @param method The method to check
 */
export declare function isFunction(method: ts.MethodDeclaration): boolean;
/**
 * Return true if the given property has the decorator @field() on top
 * of its declaration.
 *
 * @param property The property to check
 */
export declare function isField(property: ts.PropertyDeclaration): boolean;
export declare function getAlias(elem: ts.HasDecorators, kind: "field" | "func"): string | undefined;
/**
 * Return true if the given property is public.
 *
 * This function actually in work the reverse, it checks if the property
 * isn't private nor protected.
 *
 * It returns true if the property has no modifiers since no keyword
 * has been set on the property.
 *
 * Example
 * ```
 * class Human {
 *     private age = 22 // Return false
 *     protected familyName = "Doe" // Return false
 *
 *     @field
 *     name = "John" // Return true
 *
 *     city = "Paris" // Return false because there's no decorator
 * }
 * ```
 *
 * @param property The property to check on.
 */
export declare function isPublicProperty(property: ts.PropertyDeclaration): boolean;
type OptionalValue = {
    optional: boolean;
    defaultValue?: string;
};
/**
 * Return true if the parameter is optional.
 *
 * This includes both optional value defines with `?` and value that
 * have a default value.
 *
 * If there's a default value, its expression is returned in the result.
 *
 * @param param The param to check.
 */
export declare function isOptional(param: ts.Symbol): OptionalValue;
export declare function isVariadic(param: ts.Symbol): boolean;
/**
 * Convert a typename into a Dagger Typedef using dynamic typing.
 */
export declare function typeNameToTypedef(typeName: string): TypeDef<TypeDefKind>;
export {};
//# sourceMappingURL=utils.d.ts.map