import { ExecaChildProcess } from "execa";
import { GraphQLClient } from "graphql-request";
import { ConnectOpts } from "../connectOpts.js";
interface ContextConfig {
    client?: GraphQLClient;
    subProcess?: ExecaChildProcess;
}
/**
 * Context abstracts the connection to the engine.
 *
 * It's required to implement the default global SDK.
 * Its purpose is to store and returns the connection to the graphQL API, if
 * no connection is set, it can create its own.
 *
 * This is also useful for lazy evaluation with the default global client,
 * this one should only run the engine if it actually executes something.
 */
export declare class Context {
    private _client?;
    private _subProcess?;
    constructor(config?: ContextConfig);
    /**
     * Returns a GraphQL client connected to the engine.
     *
     * If no client is set, it will create one.
     */
    connection(cfg?: ConnectOpts): Promise<GraphQLClient>;
    /**
     * Close the connection and the engine if this one was started by the node
     * SDK.
     */
    close(): void;
}
/**
 * Expose a default context for the global client
 */
export declare const defaultContext: Context;
export {};
//# sourceMappingURL=context.d.ts.map